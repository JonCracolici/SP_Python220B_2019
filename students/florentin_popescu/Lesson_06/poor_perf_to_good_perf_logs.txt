(base) C:\Users\Florentin\Desktop\L6>dir
 Volume in drive C is OSDisk
 Volume Serial Number is 7808-6CD2

 Directory of C:\Users\Florentin\Desktop\L6

08/20/2019  11:40 AM    <DIR>          .
08/20/2019  11:40 AM    <DIR>          ..
08/20/2019  11:00 AM    <DIR>          data
08/20/2019  10:53 AM             1,581 poor_perf.py
               1 File(s)          1,581 bytes
               3 Dir(s)  148,742,156,288 bytes free

(base) C:\Users\Florentin\Desktop\L6>ipython
Python 3.7.3 (default, Mar 27 2019, 17:13:21) [MSC v.1915 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.7.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import os

In [2]: os.system('copy poor_perf.py poor_perf_to_good_perf.py')
        1 file(s) copied.
Out[2]: 0

In [3]: exit()

(base) C:\Users\Florentin\Desktop\L6>dir
 Volume in drive C is OSDisk
 Volume Serial Number is 7808-6CD2

 Directory of C:\Users\Florentin\Desktop\L6

08/20/2019  11:52 AM    <DIR>          .
08/20/2019  11:52 AM    <DIR>          ..
08/20/2019  11:00 AM    <DIR>          data
08/20/2019  10:53 AM             1,581 poor_perf.py
08/20/2019  10:53 AM             1,581 poor_perf_to_good_perf.py
               2 File(s)          3,162 bytes
               3 Dir(s)  148,741,754,880 bytes free


(base) C:\Users\Florentin\Desktop\L6>ipython
Python 3.7.3 (default, Mar 27 2019, 17:13:21) [MSC v.1915 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.7.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: %run poor_perf_to_good_perf.py
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 332486, '2018': 0}
'ao' was found 300777 times

In [2]: print('Error detected in 2018 year count - I will correct it')
Error detected in 2018 year count - I will correct it

In [3]: %edit poor_perf_to_good_perf.py
Editing... done. Executing edited code...
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times

In [4]: print(open("poor_perf_to_good_perf.py", "r").read())
"""
poorly performing, poorly written module

"""

import datetime
import csv

def analyze(filename):
    start = datetime.datetime.now()
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        new_ones = []
        for row in reader:
            lrow = list(row)
            if lrow[5] > '00/00/2012':
                new_ones.append((lrow[5], lrow[0]))

        year_count = {
            "2013": 0,
            "2014": 0,
            "2015": 0,
            "2016": 0,
            "2017": 0,
            "2018": 0
        }

        for new in new_ones:
            if new[0][6:] == '2013':
                year_count["2013"] += 1
            if new[0][6:] == '2014':
                year_count["2014"] += 1
            if new[0][6:] == '2015':
                year_count["2015"] += 1
            if new[0][6:] == '2016':
                year_count["2016"] += 1
            if new[0][6:] == '2017':
                year_count["2017"] += 1
            if new[0][6:] == '2018':
                # ERROR: year_count["2017"] += 1
                year_count["2018"] += 1

        print(year_count)

    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')

        found = 0

        for line in reader:
            lrow = list(line)
            if "ao" in line[6]:
                found += 1

        print(f"'ao' was found {found} times")
        end = datetime.datetime.now()

    return (start, end, year_count, found)

def main():
    filename = "data/exercise.csv"
    analyze(filename)


if __name__ == "__main__":
    main()


In [5]: print("Error on Line 40 in poor_perf_to_good_perf.py has been corrected")
Error on Line 40 in poor_perf_to_good_perf.py has been corrected

In [6]: print("Start of editing poor_perf_to_good_perf.py to achieve a better performance")
Start of editing poor_perf_to_good_perf.py to achieve a better performance

In [7]: %run poor_perf_to_good_perf.py
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times

In [8]: %prun analyze('data/exercise.csv')
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times
         1038249 function calls in 7.301 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    6.711    6.711    7.183    7.183 poor_perf_to_good_perf.py:9(analyze)
    19084    0.330    0.000    0.330    0.000 {built-in method _codecs.charmap_decode}
  1000000    0.118    0.000    0.118    0.000 {method 'append' of 'list' objects}
        1    0.118    0.118    7.301    7.301 <string>:1(<module>)
    19084    0.022    0.000    0.352    0.000 cp1252.py:22(decode)
        2    0.001    0.000    0.001    0.000 {built-in method io.open}
        4    0.001    0.000    0.001    0.000 {method 'write' of '_io.TextIOWrapper' objects}
        4    0.000    0.000    0.000    0.000 {method 'flush' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    7.301    7.301 {built-in method builtins.exec}
        2    0.000    0.000    0.001    0.001 {built-in method builtins.print}
        4    0.000    0.000    0.001    0.000 ansitowin32.py:177(write_and_convert)
        4    0.000    0.000    0.000    0.000 ansitowin32.py:245(convert_osc)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:193(write_plain_text)
        2    0.000    0.000    0.000    0.000 {built-in method _locale._getdefaultlocale}
        2    0.000    0.000    0.000    0.000 {built-in method _csv.reader}
        8    0.000    0.000    0.000    0.000 {method 'finditer' of 're.Pattern' objects}
        2    0.000    0.000    0.000    0.000 _bootlocale.py:11(getpreferredencoding)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:160(write)
        2    0.000    0.000    0.000    0.000 {built-in method now}
       23    0.000    0.000    0.000    0.000 future.py:47(__del__)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:40(write)
        2    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        4    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


In [9]: %edit poor_perf_to_good_perf.py
Editing... done. Executing edited code...
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times

In [10]: print(open("poor_perf_to_good_perf.py", "r").read())
"""
poorly performing, poorly written module

"""

import datetime
import csv

def analyze(filename):
    start = datetime.datetime.now()
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        found = 0

        new_ones = []
        for row in reader:
            lrow = list(row)
            if "ao" in row[6]:
                found += 1
            if lrow[5] > '00/00/2012':
                new_ones.append((lrow[5], lrow[0]))

        year_count = {
            "2013": 0,
            "2014": 0,
            "2015": 0,
            "2016": 0,
            "2017": 0,
            "2018": 0
        }

        for new in new_ones:
            if new[0][6:] == '2013':
                year_count["2013"] += 1
            if new[0][6:] == '2014':
                year_count["2014"] += 1
            if new[0][6:] == '2015':
                year_count["2015"] += 1
            if new[0][6:] == '2016':
                year_count["2016"] += 1
            if new[0][6:] == '2017':
                year_count["2017"] += 1
            if new[0][6:] == '2018':
                # ERROR: year_count["2017"] += 1
                year_count["2018"] += 1

        print(year_count)

    # STEP_1 COMMENT OUT: with open(filename) as csvfile:
    # STEP_1 COMMENT OUT:    reader = csv.reader(csvfile, delimiter=',', quotechar='"')

    # STEP_1 MOVE TO TOP:   found = 0

    # STEP_1 COMMENT OUT:    for line in reader:
    # STEP_1 COMMENT OUT:       lrow = list(line)
    # STEP_1 MOVE TO TOP:        if "ao" in line[6]:
    # STEP_1 MOVE TO TOP            found += 1

        print(f"'ao' was found {found} times")
        end = datetime.datetime.now()

    return (start, end, year_count, found)

def main():
    filename = "data/exercise.csv"
    analyze(filename)


if __name__ == "__main__":
    main()


In [11]: %prun analyze('data/exercise.csv')
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times
         1019152 function calls in 3.495 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    3.135    3.135    3.389    3.389 poor_perf_to_good_perf.py:9(analyze)
     9542    0.149    0.000    0.149    0.000 {built-in method _codecs.charmap_decode}
        1    0.106    0.106    3.494    3.494 <string>:1(<module>)
  1000000    0.098    0.000    0.098    0.000 {method 'append' of 'list' objects}
     9542    0.005    0.000    0.155    0.000 cp1252.py:22(decode)
        4    0.001    0.000    0.001    0.000 {method 'write' of '_io.TextIOWrapper' objects}
        4    0.001    0.000    0.001    0.000 {method 'flush' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    0.000    0.000 {built-in method io.open}
        1    0.000    0.000    3.495    3.495 {built-in method builtins.exec}
        4    0.000    0.000    0.000    0.000 ansitowin32.py:245(convert_osc)
        2    0.000    0.000    0.001    0.001 {built-in method builtins.print}
        4    0.000    0.000    0.001    0.000 ansitowin32.py:177(write_and_convert)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:193(write_plain_text)
        8    0.000    0.000    0.000    0.000 {method 'finditer' of 're.Pattern' objects}
        2    0.000    0.000    0.000    0.000 {built-in method now}
        1    0.000    0.000    0.000    0.000 {built-in method _locale._getdefaultlocale}
        1    0.000    0.000    0.000    0.000 {built-in method _csv.reader}
        1    0.000    0.000    0.000    0.000 _bootlocale.py:11(getpreferredencoding)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:160(write)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:40(write)
       15    0.000    0.000    0.000    0.000 future.py:47(__del__)
        1    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        4    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


In [12]: %edit poor_perf_to_good_perf.py
Editing... done. Executing edited code...
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times


In [13]: print(open("poor_perf_to_good_perf.py", "r").read())
"""
poorly performing, poorly written module

"""

import datetime
import csv

def analyze(filename):
    start = datetime.datetime.now()
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        found = 0

        year_count = {
            "2013": 0,
            "2014": 0,
            "2015": 0,
            "2016": 0,
            "2017": 0,
            "2018": 0
        }

        new_ones = []
        for row in reader:
            lrow = list(row)
            if "ao" in row[6]:
                found += 1
    # STEP_2 COMMENT OUT:        if lrow[5] > '00/00/2012':
            new_ones.append((lrow[5], lrow[0])) # STEP_2 SHIFT RIGHT

    # STEP_2 MOVE TO TOP:   year_count = {
    # STEP_2 MOVE TO TOP:       "2013": 0,
    # STEP_2 MOVE TO TOP:       "2014": 0,
    # STEP_2 MOVE TO TOP:       "2015": 0,
    # STEP_2 MOVE TO TOP:       "2016": 0,
    # STEP_2 MOVE TO TOP:       "2017": 0,
    # STEP_2 MOVE TO TOP:       "2018": 0
    # STEP_2 MOVE TO TOP:   }

        for new in new_ones:
            if new[0][6:] == '2013':
                year_count["2013"] += 1
            if new[0][6:] == '2014':
                year_count["2014"] += 1
            if new[0][6:] == '2015':
                year_count["2015"] += 1
            if new[0][6:] == '2016':
                year_count["2016"] += 1
            if new[0][6:] == '2017':
                year_count["2017"] += 1
            if new[0][6:] == '2018':
                # ERROR: year_count["2017"] += 1
                year_count["2018"] += 1

        print(year_count)

    # STEP_1 COMMENT OUT: with open(filename) as csvfile:
    # STEP_1 COMMENT OUT:    reader = csv.reader(csvfile, delimiter=',', quotechar='"')

    # STEP_1 MOVE TO TOP:   found = 0

    # STEP_1 COMMENT OUT:    for line in reader:
    # STEP_1 COMMENT OUT:       lrow = list(line)
    # STEP_1 MOVE TO TOP:        if "ao" in line[6]:
    # STEP_1 MOVE TO TOP            found += 1

        print(f"'ao' was found {found} times")
        end = datetime.datetime.now()

    return (start, end, year_count, found)

def main():
    filename = "data/exercise.csv"
    analyze(filename)


if __name__ == "__main__":
    main()


In [14]: %prun analyze('data/exercise.csv')
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times
         1019151 function calls in 3.481 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    3.101    3.101    3.363    3.363 poor_perf_to_good_perf.py:9(analyze)
     9542    0.151    0.000    0.151    0.000 {built-in method _codecs.charmap_decode}
        1    0.118    0.118    3.481    3.481 <string>:1(<module>)
  1000000    0.103    0.000    0.103    0.000 {method 'append' of 'list' objects}
     9542    0.006    0.000    0.156    0.000 cp1252.py:22(decode)
        4    0.001    0.000    0.001    0.000 {method 'flush' of '_io.TextIOWrapper' objects}
        4    0.001    0.000    0.001    0.000 {method 'write' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    0.000    0.000 {built-in method io.open}
        1    0.000    0.000    3.481    3.481 {built-in method builtins.exec}
        2    0.000    0.000    0.002    0.001 {built-in method builtins.print}
        4    0.000    0.000    0.000    0.000 ansitowin32.py:245(convert_osc)
        4    0.000    0.000    0.002    0.000 ansitowin32.py:193(write_plain_text)
        4    0.000    0.000    0.002    0.000 ansitowin32.py:177(write_and_convert)
        1    0.000    0.000    0.000    0.000 {built-in method _locale._getdefaultlocale}
        8    0.000    0.000    0.000    0.000 {method 'finditer' of 're.Pattern' objects}
        2    0.000    0.000    0.000    0.000 {built-in method now}
        4    0.000    0.000    0.002    0.000 ansitowin32.py:160(write)
        1    0.000    0.000    0.000    0.000 {built-in method _csv.reader}
        1    0.000    0.000    0.000    0.000 _bootlocale.py:11(getpreferredencoding)
        4    0.000    0.000    0.002    0.000 ansitowin32.py:40(write)
       14    0.000    0.000    0.000    0.000 future.py:47(__del__)
        1    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        4    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


In [15]: %edit poor_perf_to_good_perf.py
Editing... done. Executing edited code...
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times

In [16]: print(open("poor_perf_to_good_perf.py", "r").read())
"""
poorly performing, poorly written module

"""

import datetime
import csv

def analyze(filename):
    start = datetime.datetime.now()
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        found = 0

        year_count = {
            "2013": 0,
            "2014": 0,
            "2015": 0,
            "2016": 0,
            "2017": 0,
            "2018": 0
        }

        new_ones = []
        for row in reader:
    # STEP_3 COMMENT OUT:        lrow = list(row)
            if "ao" in row[6]:
                found += 1
    # STEP_2 COMMENT OUT:        if lrow[5] > '00/00/2012':
    # STEP_3 COMMENT OUT:       new_ones.append((lrow[5], lrow[0]))
            year_count[row[5][6:]] +=1

    # STEP_2 MOVE TO TOP:   year_count = {
    # STEP_2 MOVE TO TOP:       "2013": 0,
    # STEP_2 MOVE TO TOP:       "2014": 0,
    # STEP_2 MOVE TO TOP:       "2015": 0,
    # STEP_2 MOVE TO TOP:       "2016": 0,
    # STEP_2 MOVE TO TOP:       "2017": 0,
    # STEP_2 MOVE TO TOP:       "2018": 0
    # STEP_2 MOVE TO TOP:   }

        for new in new_ones:
            if new[0][6:] == '2013':
                year_count["2013"] += 1
            if new[0][6:] == '2014':
                year_count["2014"] += 1
            if new[0][6:] == '2015':
                year_count["2015"] += 1
            if new[0][6:] == '2016':
                year_count["2016"] += 1
            if new[0][6:] == '2017':
                year_count["2017"] += 1
            if new[0][6:] == '2018':
                # ERROR: year_count["2017"] += 1
                year_count["2018"] += 1

        print(year_count)

    # STEP_1 COMMENT OUT: with open(filename) as csvfile:
    # STEP_1 COMMENT OUT:    reader = csv.reader(csvfile, delimiter=',', quotechar='"')

    # STEP_1 MOVE TO TOP:   found = 0

    # STEP_1 COMMENT OUT:    for line in reader:
    # STEP_1 COMMENT OUT:       lrow = list(line)
    # STEP_1 MOVE TO TOP:        if "ao" in line[6]:
    # STEP_1 MOVE TO TOP            found += 1

        print(f"'ao' was found {found} times")
        end = datetime.datetime.now()

    return (start, end, year_count, found)

def main():
    filename = "data/exercise.csv"
    analyze(filename)


if __name__ == "__main__":
    main()


In [17]: %prun analyze('data/exercise.csv')
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times
         19137 function calls in 2.327 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    2.167    2.167    2.327    2.327 poor_perf_to_good_perf.py:9(analyze)
     9542    0.152    0.000    0.152    0.000 {built-in method _codecs.charmap_decode}
     9542    0.007    0.000    0.159    0.000 cp1252.py:22(decode)
        4    0.001    0.000    0.001    0.000 {method 'write' of '_io.TextIOWrapper' objects}
        4    0.001    0.000    0.001    0.000 {method 'flush' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    0.000    0.000 {built-in method io.open}
        8    0.000    0.000    0.000    0.000 {method 'finditer' of 're.Pattern' objects}
        1    0.000    0.000    2.327    2.327 {built-in method builtins.exec}
        4    0.000    0.000    0.000    0.000 ansitowin32.py:245(convert_osc)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:177(write_and_convert)
        2    0.000    0.000    0.001    0.001 {built-in method builtins.print}
        4    0.000    0.000    0.001    0.000 ansitowin32.py:193(write_plain_text)
        1    0.000    0.000    2.327    2.327 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 _bootlocale.py:11(getpreferredencoding)
        1    0.000    0.000    0.000    0.000 {built-in method _csv.reader}
        1    0.000    0.000    0.000    0.000 {built-in method _locale._getdefaultlocale}
        2    0.000    0.000    0.000    0.000 {built-in method now}
        4    0.000    0.000    0.001    0.000 ansitowin32.py:160(write)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:40(write)
        1    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        4    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


In [18]: %edit poor_perf_to_good_perf.py
Editing... done. Executing edited code...
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times


In [19]: print(open("poor_perf_to_good_perf.py", "r").read())
"""
poorly performing, poorly written module

"""

import datetime
import csv

def analyze(filename):
    start = datetime.datetime.now()
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        found = 0

        year_count = {
            "2013": 0,
            "2014": 0,
            "2015": 0,
            "2016": 0,
            "2017": 0,
            "2018": 0
        }

    # STEP_4 COMMENT OUT:    new_ones = []
        for row in reader:
    # STEP_3 COMMENT OUT:        lrow = list(row)
            if "ao" in row[6]:
                found += 1
    # STEP_2 COMMENT OUT:        if lrow[5] > '00/00/2012':
    # STEP_3 COMMENT OUT:       new_ones.append((lrow[5], lrow[0]))
            year_count[row[5][6:]] +=1

    # STEP_2 MOVE TO TOP:   year_count = {
    # STEP_2 MOVE TO TOP:       "2013": 0,
    # STEP_2 MOVE TO TOP:       "2014": 0,
    # STEP_2 MOVE TO TOP:       "2015": 0,
    # STEP_2 MOVE TO TOP:       "2016": 0,
    # STEP_2 MOVE TO TOP:       "2017": 0,
    # STEP_2 MOVE TO TOP:       "2018": 0
    # STEP_2 MOVE TO TOP:   }

    # STEP_4 COMMENT OUT:    for new in new_ones:
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2013':
    # STEP_4 COMMENT OUT:            year_count["2013"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2014':
    # STEP_4 COMMENT OUT:            year_count["2014"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2015':
    # STEP_4 COMMENT OUT:            year_count["2015"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2016':
    # STEP_4 COMMENT OUT:            year_count["2016"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2017':
    # STEP_4 COMMENT OUT:            year_count["2017"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2018':
                # ERROR: year_count["2017"] += 1
    # STEP_4 COMMENT OUT:            year_count["2018"] += 1

        print(year_count)

    # STEP_1 COMMENT OUT: with open(filename) as csvfile:
    # STEP_1 COMMENT OUT:    reader = csv.reader(csvfile, delimiter=',', quotechar='"')

    # STEP_1 MOVE TO TOP:   found = 0

    # STEP_1 COMMENT OUT:    for line in reader:
    # STEP_1 COMMENT OUT:       lrow = list(line)
    # STEP_1 MOVE TO TOP:        if "ao" in line[6]:
    # STEP_1 MOVE TO TOP            found += 1

        print(f"'ao' was found {found} times")
        end = datetime.datetime.now()

    return (start, end, year_count, found)

def main():
    filename = "data/exercise.csv"
    analyze(filename)


if __name__ == "__main__":
    main()


In [20]: %prun analyze('data/exercise.csv')
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times
         19137 function calls in 2.311 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    2.152    2.152    2.311    2.311 poor_perf_to_good_perf.py:9(analyze)
     9542    0.151    0.000    0.151    0.000 {built-in method _codecs.charmap_decode}
     9542    0.006    0.000    0.157    0.000 cp1252.py:22(decode)
        4    0.001    0.000    0.001    0.000 {method 'flush' of '_io.TextIOWrapper' objects}
        4    0.001    0.000    0.001    0.000 {method 'write' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    0.000    0.000 {built-in method io.open}
        1    0.000    0.000    2.311    2.311 {built-in method builtins.exec}
        4    0.000    0.000    0.000    0.000 ansitowin32.py:245(convert_osc)
        2    0.000    0.000    0.002    0.001 {built-in method builtins.print}
        4    0.000    0.000    0.002    0.000 ansitowin32.py:177(write_and_convert)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:193(write_plain_text)
        1    0.000    0.000    2.311    2.311 <string>:1(<module>)
        8    0.000    0.000    0.000    0.000 {method 'finditer' of 're.Pattern' objects}
        2    0.000    0.000    0.000    0.000 {built-in method now}
        1    0.000    0.000    0.000    0.000 _bootlocale.py:11(getpreferredencoding)
        1    0.000    0.000    0.000    0.000 {built-in method _locale._getdefaultlocale}
        4    0.000    0.000    0.002    0.000 ansitowin32.py:160(write)
        1    0.000    0.000    0.000    0.000 {built-in method _csv.reader}
        4    0.000    0.000    0.002    0.000 ansitowin32.py:40(write)
        1    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        4    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


In [21]: %edit poor_perf_to_good_perf.py
Editing... done. Executing edited code...
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times

In [22]: print(open("poor_perf_to_good_perf.py", "r").read())
"""
poorly performing, poorly written module

"""

import datetime
import csv

def analyze(filename):
    start = datetime.datetime.now()
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        found = 0

        year_count = {
            "2013": 0,
            "2014": 0,
            "2015": 0,
            "2016": 0,
            "2017": 0,
            "2018": 0
        }

    # STEP_4 COMMENT OUT:    new_ones = []
        for row in reader:
    # STEP_3 COMMENT OUT:        lrow = list(row)
            if "ao" in row[6]:
                found += 1
    # STEP_2 COMMENT OUT:        if lrow[5] > '00/00/2012':
    # STEP_3 COMMENT OUT:       new_ones.append((lrow[5], lrow[0]))

        # STEP_5 ADD EXCEPTION
            try:
                year_count[row[5][6:]] +=1
            except KeyError:
                pass

    # STEP_2 MOVE TO TOP:   year_count = {
    # STEP_2 MOVE TO TOP:       "2013": 0,
    # STEP_2 MOVE TO TOP:       "2014": 0,
    # STEP_2 MOVE TO TOP:       "2015": 0,
    # STEP_2 MOVE TO TOP:       "2016": 0,
    # STEP_2 MOVE TO TOP:       "2017": 0,
    # STEP_2 MOVE TO TOP:       "2018": 0
    # STEP_2 MOVE TO TOP:   }

    # STEP_4 COMMENT OUT:    for new in new_ones:
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2013':
    # STEP_4 COMMENT OUT:            year_count["2013"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2014':
    # STEP_4 COMMENT OUT:            year_count["2014"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2015':
    # STEP_4 COMMENT OUT:            year_count["2015"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2016':
    # STEP_4 COMMENT OUT:            year_count["2016"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2017':
    # STEP_4 COMMENT OUT:            year_count["2017"] += 1
    # STEP_4 COMMENT OUT:        if new[0][6:] == '2018':
                # ERROR: year_count["2017"] += 1
    # STEP_4 COMMENT OUT:            year_count["2018"] += 1

        print(year_count)

    # STEP_1 COMMENT OUT: with open(filename) as csvfile:
    # STEP_1 COMMENT OUT:    reader = csv.reader(csvfile, delimiter=',', quotechar='"')

    # STEP_1 MOVE TO TOP:   found = 0

    # STEP_1 COMMENT OUT:    for line in reader:
    # STEP_1 COMMENT OUT:       lrow = list(line)
    # STEP_1 MOVE TO TOP:        if "ao" in line[6]:
    # STEP_1 MOVE TO TOP            found += 1

        print(f"'ao' was found {found} times")
        end = datetime.datetime.now()

    return (start, end, year_count, found)

def main():
    filename = "data/exercise.csv"
    analyze(filename)


if __name__ == "__main__":
    main()

In [23]: %prun analyze('data/exercise.csv')
{'2013': 167194, '2014': 166561, '2015': 166752, '2016': 167007, '2017': 166571, '2018': 165915}
'ao' was found 300777 times
         19137 function calls in 2.293 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    2.135    2.135    2.293    2.293 good_perf.py:11(analyze)
     9542    0.150    0.000    0.150    0.000 {built-in method _codecs.charmap_decode}
     9542    0.006    0.000    0.156    0.000 cp1252.py:22(decode)
        4    0.001    0.000    0.001    0.000 {method 'flush' of '_io.TextIOWrapper' objects}
        4    0.000    0.000    0.000    0.000 {method 'write' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    0.000    0.000 {built-in method io.open}
        1    0.000    0.000    2.293    2.293 {built-in method builtins.exec}
        2    0.000    0.000    0.000    0.000 {built-in method now}
        4    0.000    0.000    0.001    0.000 ansitowin32.py:177(write_and_convert)
        2    0.000    0.000    0.001    0.001 {built-in method builtins.print}
        1    0.000    0.000    2.293    2.293 <string>:1(<module>)
        4    0.000    0.000    0.001    0.000 ansitowin32.py:193(write_plain_text)
        4    0.000    0.000    0.000    0.000 ansitowin32.py:245(convert_osc)
        8    0.000    0.000    0.000    0.000 {method 'finditer' of 're.Pattern' objects}
        4    0.000    0.000    0.001    0.000 ansitowin32.py:160(write)
        1    0.000    0.000    0.000    0.000 {built-in method _locale._getdefaultlocale}
        1    0.000    0.000    0.000    0.000 _bootlocale.py:11(getpreferredencoding)
        1    0.000    0.000    0.000    0.000 {built-in method _csv.reader}
        4    0.000    0.000    0.001    0.000 ansitowin32.py:40(write)
        4    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 codecs.py:260(__init__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

In [24]: print( " start cleaning poor_perf_to_good_perf.py")
 start cleaning poor_perf_to_good_perf.py


In [25]: print(open("poor_perf_to_good_perf.py", "r").read())
"""
better performing, better written module

"""
# imports
import datetime
import csv
# ======================


def analyze(filename):
    """ analyze csvfile """
    start = datetime.datetime.now()
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        found = 0

        year_count = {
            "2013": 0,
            "2014": 0,
            "2015": 0,
            "2016": 0,
            "2017": 0,
            "2018": 0
        }

        for row in reader:
            if "ao" in row[6]:
                found += 1
            try:
                year_count[row[5][6:]] += 1
            except KeyError:
                pass

        print(year_count)

        print(f"'ao' was found {found} times")
        end = datetime.datetime.now()

    return (start, end, year_count, found)
# ======================


def main():
    """ main method """
    filename = "data/exercise.csv"
    analyze(filename)
# ======================


if __name__ == "__main__":
    main()


In [26]: import os

In [27]: os.system('copy poor_perf_to_good_perf.py good_perf.py')
        1 file(s) copied.
Out[27]: 0

In [28]: exit()

(base) C:\Users\Florentin\Desktop\L6>dir
 Volume in drive C is OSDisk
 Volume Serial Number is 7808-6CD2

 Directory of C:\Users\Florentin\Desktop\L6

08/20/2019  01:18 PM    <DIR>          .
08/20/2019  01:18 PM    <DIR>          ..
08/20/2019  11:00 AM    <DIR>          data
08/20/2019  01:09 PM             1,032 good_perf.py
08/20/2019  10:53 AM             1,581 poor_perf.py
08/20/2019  01:09 PM             1,032 poor_perf_to_good_perf.py
               3 File(s)          3,645 bytes
               3 Dir(s)  148,731,080,704 bytes free

(base) C:\Users\Florentin\Desktop\L6>ipython
Python 3.7.3 (default, Mar 27 2019, 17:13:21) [MSC v.1915 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.7.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import os

In [2]: os.remove("poor_perf_to_good_perf.py")

In [3]: exit()

(base) C:\Users\Florentin\Desktop\L6>dir
 Volume in drive C is OSDisk
 Volume Serial Number is 7808-6CD2

 Directory of C:\Users\Florentin\Desktop\L6

08/20/2019  01:20 PM    <DIR>          .
08/20/2019  01:20 PM    <DIR>          ..
08/20/2019  11:00 AM    <DIR>          data
08/20/2019  01:09 PM             1,032 good_perf.py
08/20/2019  10:53 AM             1,581 poor_perf.py
               2 File(s)          2,613 bytes
               3 Dir(s)  148,729,171,968 bytes free


(base) C:\Users\Florentin\Desktop\L6>python -m pylint ./data

--------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)

(base) C:\Users\Florentin\Desktop\L6>cd ..

(base) C:\Users\Florentin\Desktop>python -m pylint ./L6/good_perf.py

------------------------------------
Your code has been rated at 10.00/10


(base) C:\Users\Florentin\Desktop>