Performance notes for Lesson 6

(1) Initial timing of poor-performance script "poor_perf.py" using perf_counter() showed a total runtime of 5.548 seconds. Moreover, the performance statistics (pstats.Stats) indicated a total of 1,039,355 function calls made in 5.438 seconds. Using cPython as interpreter the total script's runtime was estimated at 4.911 seconds. 

(2) Eliminated double opening of the csv-file, removed the second for-loop and merged the if-condition from second for-loop into the first, having the script run only once through the csv file. Therefore, a total of 1,019,152 function calls were made in 3.459 seconds. The profiler invoked from the iPython interpreter evaluated the new script's execution time at 3.135 seconds.

(3) Commented out the if-condition on invalid date '00/00/2012'. This left the performance unchanged, with the total execution time standing at 3.101 seconds.

(4)  Removed lrow from the for-loop, thus no longer generating a list of each row to iterate through. Took away the append procedure to list new_ones (i.e., new_ones.append((lrow[5],lrow[0])) and replaced it with direct year_count (i.e., year_count[row[5][6:]]+=1). Consequently, total number of function calls dropped to 19,137 and script's total execution time reduced to 2.167 seconds.
        
(5) Since the empty new_ones list was no longer needed, I commented it out along with related, but now redundant for-loop containing 6 if-conditions checking for each of the years 2013-18. Total execution time evaluated at 2.152 seconds.

(6) Added KeyError exception to year_count and cleared the code by eliminating commented-out sequences. During the final run of cleaned script, the overall time was evaluated at 2.135 seconds.   
