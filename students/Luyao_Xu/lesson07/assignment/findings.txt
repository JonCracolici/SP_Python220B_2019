$python3 -m cProfile -s cumtime linear.py
[(4, 0, 4, 0.004433155059814453), (3, 0, 3, 0.0025038719177246094)]
{'prd001': {'product_id': 'prd001', 'description': 'Chair', 'product_type': 'furniture', 'quantity_available': 1}, 'prd002': {'product_id': 'prd002', 'description': 'Table', 'product_type': 'furniture', 'quantity_available': 5}, 'prd003': {'product_id': 'prd003', 'description': 'Dress', 'product_type': 'clothes', 'quantity_available': 2}}
{'user001': {'user_id': 'user001', 'name': 'Amy', 'address': 'Seattle', 'phone_number': '12345', 'email': 'amy@gmail.com'}}
         66681 function calls (65053 primitive calls) in 0.224 seconds

   Ordered by: cumulative time

$python3 -m cProfile -s cumtime parallel.py
[(4, 0, 4, 0.0034952163696289062), (3, 0, 3, 0.005206108093261719)]
{'prd001': {'product_id': 'prd001', 'description': 'Chair', 'product_type': 'furniture', 'quantity_available': 1}, 'prd002': {'product_id': 'prd002', 'description': 'Table', 'product_type': 'furniture', 'quantity_available': 5}, 'prd003': {'product_id': 'prd003', 'description': 'Dress', 'product_type': 'clothes', 'quantity_available': 2}}
{'user001': {'user_id': 'user001', 'name': 'Amy', 'address': 'Seattle', 'phone_number': '12345', 'email': 'amy@gmail.com'}}
         63158 function calls (61587 primitive calls) in 0.139 seconds

   Ordered by: cumulative time

From the profiling result, we can see that although parallel operation ends up with a higher database insertion time, the total time to run
the program is still shorter. The slower data insertion might be caused by mongo db server's configuration on handling concurrent insertions.
